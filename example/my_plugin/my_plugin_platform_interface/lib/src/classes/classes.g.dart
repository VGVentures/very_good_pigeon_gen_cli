// Autogenerated from Pigeon (v26.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed.every(
          ((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]),
        );
  }
  if (a is Map && b is Map) {
    return a.length == b.length &&
        a.entries.every(
          (MapEntry<Object?, Object?> entry) =>
              (b as Map<Object?, Object?>).containsKey(entry.key) &&
              _deepEquals(entry.value, b[entry.key]),
        );
  }
  return a == b;
}

/// An enum representing test values.
enum TestEnum {
  /// The first value.
  value1,

  /// The second value.
  value2,

  /// The third value.
  value3,
}

/// An enum representing test values.
enum TestEnum1 {
  /// The first value.
  value1,

  /// The second value.
  value2,

  /// The third value.
  value3,
}

/// A model representing test data and its associated [TestModel3] model.
class TestModel2 {
  TestModel2({
    required this.data,
    required this.model,
  });

  /// The data string for this model.
  String data;

  /// The model associated with this model.
  TestModel3 model;

  List<Object?> _toList() {
    return <Object?>[
      data,
      model,
    ];
  }

  Object encode() {
    return _toList();
  }

  static TestModel2 decode(Object result) {
    result as List<Object?>;
    return TestModel2(
      data: result[0]! as String,
      model: result[1]! as TestModel3,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! TestModel2 || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

/// A model representing test data and its associated [TestModel3] model.
class TestModel {
  TestModel({
    required this.data,
    required this.model,
    required this.enumValue,
  });

  /// The data string for this model.
  String data;

  /// The model associated with this model.
  TestModel3 model;

  /// The enum value associated with this model.
  TestEnum1 enumValue;

  List<Object?> _toList() {
    return <Object?>[
      data,
      model,
      enumValue,
    ];
  }

  Object encode() {
    return _toList();
  }

  static TestModel decode(Object result) {
    result as List<Object?>;
    return TestModel(
      data: result[0]! as String,
      model: result[1]! as TestModel3,
      enumValue: result[2]! as TestEnum1,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! TestModel || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

/// A model representing test data and its associated [TestEnum] value.
class TestModel3 {
  TestModel3({
    required this.data,
    required this.enumValue,
  });

  /// The data string for this model.
  String data;

  /// The enum value associated with this model.
  TestEnum enumValue;

  List<Object?> _toList() {
    return <Object?>[
      data,
      enumValue,
    ];
  }

  Object encode() {
    return _toList();
  }

  static TestModel3 decode(Object result) {
    result as List<Object?>;
    return TestModel3(
      data: result[0]! as String,
      enumValue: result[1]! as TestEnum,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! TestModel3 || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}
